#!/usr/bin/env ruby
require_relative '../lib/sanity_checker'

# Convert an epub file to a markdown file
class Main
  def initialize(*args)
    SanityChecker.dependency('ebook-convert')
    @inputs = SanityChecker.extension('epub', args)
  end

  def run; end
end
Main.new(*ARGV).run



# require 'fileutils'
# # Loop on each file
# ARGV.each do |file|
#   epubFile = File.expand_path(file)
#   ext = File.extname(epubFile)
#   dirname = File.dirname(epubFile)
#   basename = File.basename(epubFile)
#   coverFile = epubFile.gsub(/\.epub$/, '.jpg')
#   txtFile = epubFile.gsub(/\.epub$/, '.txt')
#   mdFile = epubFile.gsub(/\.epub$/, '.md')
#
#   # Act only on epub
#   next unless ext == '.epub'
#
#   # Warn if no cover
#   puts 'WARNING : No cover found in dir' unless File.exist?(coverFile)
#
#   # Create a backup if md file already present
#   File.rename(mdFile, mdFile + '.bak') if File.exist?(mdFile)
#
#   # Convert to txt first
#   puts 'Converting to md'
#   `ebook-convert "#{epubFile}" "#{txtFile}"`
#
#   # Then converting (renaming) to md
#   File.rename(txtFile, mdFile)
# end
